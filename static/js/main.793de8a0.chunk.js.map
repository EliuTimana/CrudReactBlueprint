{"version":3,"sources":["services/SecurityService.ts","components/auth/Login.tsx","ApiConfig.ts","services/PostsService.ts","services/UsersService.ts","components/posts/ShowPostDialog.tsx","components/posts/EditPostDialog.tsx","components/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SecurityService","API","login","username","password","Promise","resolve","reject","setTimeout","sessionStorage","setItem","loggedIn","getItem","Login","history","useHistory","schema","Yup","shape","email","required","className","elevation","Elevation","THREE","icon","IconNames","LOCK","iconSize","initialValues","validationSchema","onSubmit","values","a","setSubmitting","push","AppToaster","show","message","intent","Intent","DANGER","DELETE","isSubmitting","errors","touched","labelFor","label","helperText","NONE","disabled","name","id","placeholder","leftIcon","USER","as","InputGroup","type","PRIMARY","fill","loading","axiosApi","axios","create","baseURL","toPromise","p","then","r","status","data","catch","e","PostsService","get","posts","users","map","user","find","u","userId","delete","this","post","patch","UsersService","ShowPostDialog","onClose","useState","comments","setComments","loadComments","getComments","console","error","useEffect","PostPanel","tagName","body","UserPanel","CommentsPanel","c","canOutsideClickClose","EYE_ON","title","isOpen","Classes","DIALOG_BODY","defaultSelectedTabId","panel","EditPostDialog","UsersSelect","Select","ofType","x","selected","setSelected","EDIT","update","SUCCESS","setFieldValue","items","activeItem","onItemSelect","itemRenderer","text","onClick","rightIcon","growVertically","TextArea","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","Home","setPosts","setUsers","postToShow","setPostToShow","postToDelete","setPostToDelete","postToEdit","setPostToEdit","deletingPost","setDeletingPost","loadData","all","getAll","mergeWithUsers","deletePost","filter","TRASH","onConfirm","cancelButtonText","onCancel","confirmButtonText","numRows","length","enableRowResizing","defaultRowHeight","renderMode","RenderMode","BATCH","selectionModes","SelectionModes","loadingOptions","TableLoadingOption","CELLS","columnWidths","cellRenderer","rowIndex","tooltip","wrapText","truncated","value","minimal","EYE_OPEN","small","showPost","Toaster","position","Position","TOP","autoFocus","App","isLoggedIn","to","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.793de8a0.chunk.js","sourcesContent":["export class SecurityService {\n  private static API = '';\n  public static login = (username: string, password: string) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (username === 'admin@email.com' && password === 'qwerty') {\n          sessionStorage.setItem('token', 'jwt_token');\n          resolve(true);\n        } else {\n          reject();\n        }\n      }, 400);\n    });\n  }\n\n  public static loggedIn = () => {\n    return sessionStorage.getItem('token') !== null;\n  }\n}\n","import { Button, Card, Elevation, FormGroup, Icon, InputGroup, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Field, Form, Formik } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup'\nimport { SecurityService } from '../../services/SecurityService';\nimport { AppToaster } from '../../App';\nimport { useHistory } from 'react-router-dom';\n\n\nexport const Login = () => {\n  const history = useHistory();\n  const schema = Yup.object().shape({\n    email: Yup.string().email('Email no es válido').required('Ingrese su email'),\n    password: Yup.string().required('Ingrese su contraseña')\n  });\n  return (\n      <>\n        <div className=\"d-flex align-items-center justify-content-center vh-100\">\n          <Card elevation={Elevation.THREE}>\n            <div className=\"text-center\">\n              <Icon icon={IconNames.LOCK} iconSize={80}/>\n            </div>\n            <Formik initialValues={{email: '', password: ''}}\n                    validationSchema={schema}\n                    onSubmit={\n                      async (values, {setSubmitting}) => {\n                        try {\n                          const loggedIn = await SecurityService.login(values.email, values.password);\n                          if (loggedIn) {\n                            history.push('/');\n                          }\n                          setSubmitting(false);\n                        } catch (e) {\n                          setSubmitting(false);\n                          AppToaster.show({\n                            message: 'Wrong credentials',\n                            intent: Intent.DANGER,\n                            icon: IconNames.DELETE\n                          });\n                        }\n                      }\n                    }>\n              {\n                ({isSubmitting, errors, touched}) => (\n                    <Form>\n                      <FormGroup labelFor=\"email\" label=\"Email\" helperText={touched.email && errors.email}\n                                 intent={errors.email && touched.email ? Intent.DANGER : Intent.NONE}\n                                 disabled={isSubmitting}>\n                        <Field name=\"email\" id=\"email\" placeholder=\"Enter your email\"\n                               intent={errors.email && touched.email ? Intent.DANGER : Intent.NONE}\n                               leftIcon={IconNames.USER}\n                               disabled={isSubmitting} as={InputGroup}/>\n                      </FormGroup>\n                      <FormGroup labelFor=\"password\" label=\"Password\" disabled={isSubmitting}\n                                 helperText={touched.password && errors.password}\n                                 intent={errors.password && touched.password ? Intent.DANGER : Intent.NONE}>\n                        <Field id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter your password\"\n                               intent={errors.password && touched.password ? Intent.DANGER : Intent.NONE}\n                               leftIcon={IconNames.LOCK}\n                               disabled={isSubmitting} as={InputGroup}/>\n                      </FormGroup>\n                      <Button type=\"submit\" intent={Intent.PRIMARY} fill loading={isSubmitting}>Sign in</Button>\n                    </Form>\n                )\n              }\n            </Formik>\n          </Card>\n        </div>\n      </>\n  )\n}\n","import axios, { AxiosPromise } from 'axios';\n\nexport const axiosApi = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com'\n});\n\nexport const toPromise = <T>(p: AxiosPromise<T>) => {\n  return new Promise<T>((resolve, reject) => {\n    p.then(r => {\n      if (r.status === 200) {\n        resolve(r.data);\n      }\n    }).catch(e => {\n      reject(e);\n    })\n  })\n}\n","import { axiosApi, toPromise } from '../ApiConfig';\nimport { Post, User, Comment } from '../models';\n\nexport class PostsService {\n\n  private static API = '/posts';\n\n  public static getAll() {\n    return new Promise<Post[]>((resolve, reject) => {\n      axiosApi.get<Post[]>(this.API).then(r => {\n        if (r.status === 200) {\n          resolve(r.data);\n        }\n      }).catch(e => reject(e));\n    });\n  }\n\n  public static mergeWithUsers(posts: Post[], users: User[]) {\n    return posts.map(p => {\n      p.user = users.find(u => u.id === p.userId);\n      return p;\n    })\n  }\n\n  public static delete(id: number) {\n    return new Promise<void>((resolve, reject) => {\n      axiosApi.delete(`${this.API}/${id}`).then(r => {\n        if (r.status === 200) {\n          resolve();\n        }\n      }).catch(e => reject(e));\n    })\n  }\n\n  public static getComments(id: number) {\n    return toPromise<Comment[]>(axiosApi.get(`${this.API}/${id}/comments`))\n  }\n\n  public static update(post:Post){\n    return new Promise<void>((resolve, reject) => {\n      axiosApi.patch(`${this.API}/${post.id}`,post).then(r => {\n        if (r.status === 200) {\n          resolve();\n        }\n      }).catch(e => reject(e));\n    })\n  }\n}\n","import { axiosApi, toPromise } from '../ApiConfig';\nimport { User } from '../models';\n\nexport class UsersService {\n  public static getAll() {\n    return toPromise<User[]>(axiosApi.get<User[]>('/users'));\n  }\n}\n","import { Classes, Dialog, Divider, Tab, Tabs, Text } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Comment, Post } from '../../models';\nimport { useEffect, useState } from 'react';\nimport { PostsService } from '../../services/PostsService';\n\ninterface Props {\n  post: Post;\n\n  onClose(): void;\n}\n\nexport const ShowPostDialog = ({post, onClose}: Props) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const loadComments = async () => {\n    try {\n      const data = await PostsService.getComments(post.id);\n      setComments(data)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  useEffect(() => {\n    loadComments();\n  }, []);\n\n\n  const PostPanel = ({post}: { post: Post }) => {\n    return <Text tagName=\"p\">{post.body}</Text>;\n  }\n\n  const UserPanel = ({post}: { post: Post }) => {\n    return <p>\n      <Text tagName=\"strong\">{post.user?.name}</Text> (<Text tagName=\"em\">{post.user?.email}</Text>)\n      <dl>\n        <dt>qweqe</dt>\n        <dd>wqeqw</dd>\n      </dl>\n    </p>;\n  }\n\n  const CommentsPanel = ({comments}: { comments: Comment[]|null }) => {\n    return <>\n      <ul>\n        {comments?.map(c => <li key={c.id}>{c.body}</li>)}\n      </ul>\n    </>;\n  }\n\n  return <Dialog canOutsideClickClose={false} icon={IconNames.EYE_ON} title={post.title} isOpen={!!post} onClose={() => onClose()}>\n    <div className={Classes.DIALOG_BODY}>\n      <Tabs id=\"tabs\" defaultSelectedTabId=\"post\">\n        <Tab id=\"post\" title=\"Post\" panel={<PostPanel post={post}/>}/>\n        <Tab id=\"author\" title=\"Author\" panel={<UserPanel post={post}/>}/>\n        <Tab id=\"comments\" title=\"Comments\" panel={<CommentsPanel comments={comments}/>}/>\n      </Tabs>\n    </div>\n  </Dialog>\n}\n","import { Post, User } from '../../models';\nimport { Button, Classes, Dialog, FormGroup, InputGroup, Intent, MenuItem, TextArea } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport React, { useState } from 'react';\nimport { Select } from '@blueprintjs/select';\nimport { PostsService } from '../../services/PostsService';\nimport { AppToaster } from '../../App';\n\ninterface Props {\n  post: Post;\n  users: User[];\n\n  onClose(): void;\n}\n\nexport const EditPostDialog = ({post, users, onClose}: Props) => {\n  const schema = Yup.object().shape({\n    title: Yup.string().required(),\n    body: Yup.string().required(),\n    userId: Yup.number().required()\n  })\n\n  const UsersSelect = Select.ofType<User>();\n  const [selected, setSelected] = useState<User>(users.find(x => x.id === post.userId)!!)\n\n  return <Dialog canOutsideClickClose={false} icon={IconNames.EDIT} title=\"Edit post\" onClose={() => onClose()} isOpen={!!post}>\n    <Formik\n        initialValues={{\n          title: post.title,\n          body: post.body,\n          userId: post.userId\n        }}\n        validationSchema={schema}\n        onSubmit={\n          async (values, {setSubmitting}) => {\n            try {\n              await PostsService.update({...values, id: post.id});\n\n              AppToaster.show({message: 'Post successfully updated', intent: Intent.SUCCESS});\n              setSubmitting(false)\n              onClose()\n            } catch (e) {\n              setSubmitting(false)\n              console.error(e)\n            }\n          }\n        }>\n      {\n        ({isSubmitting, touched, errors, values, setFieldValue}) => (\n            <Form>\n              <div className={Classes.DIALOG_BODY}>\n                <FormGroup labelFor=\"title\" label=\"Title\" helperText={touched.title && errors.title}>\n                  <Field id=\"title\" name=\"title\" as={InputGroup}/>\n                </FormGroup>\n                <FormGroup labelFor=\"userId\" label=\"User\" helperText={touched.userId && errors.userId}>\n                  <Field id=\"userId\" name=\"userId\" as={UsersSelect} items={users}\n                         activeItem={selected}\n                         onItemSelect={() => {\n                         }}\n\n                         itemRenderer={(user: User) => <MenuItem key={user.id} text={user.name} onClick={() => {\n                           setSelected(user)\n                           setFieldValue('userId', user.id)\n                         }}/>}>\n                    <Button text={selected.name} fill={true} rightIcon=\"double-caret-vertical\"/>\n                  </Field>\n                </FormGroup>\n\n                <FormGroup labelFor=\"body\" label=\"Body\" helperText={touched.body && errors.body}>\n                  <Field id=\"body\" name=\"body\" fill={true} growVertically={true} as={TextArea}/>\n                </FormGroup>\n              </div>\n              <div className={Classes.DIALOG_FOOTER}>\n                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                  <Button loading={isSubmitting} type=\"submit\" intent={Intent.PRIMARY}>Save changes</Button>\n                </div>\n              </div>\n            </Form>\n        )\n      }\n    </Formik>\n  </Dialog>\n}\n","import { useEffect, useState } from 'react';\nimport { Post, User } from '../models';\nimport { PostsService } from '../services/PostsService';\nimport { UsersService } from '../services/UsersService';\nimport { Cell, Column, RenderMode, SelectionModes, Table, TableLoadingOption } from '@blueprintjs/table';\nimport { Alert, Button, Intent, Text } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ShowPostDialog } from './posts/ShowPostDialog';\nimport { AppToaster } from '../App';\nimport { EditPostDialog } from './posts/EditPostDialog';\n\nexport const Home = () => {\n  const [posts, setPosts] = useState<Post[]>();\n  const [users, setUsers] = useState<User[]>();\n  const [postToShow, setPostToShow] = useState<Post | null>();\n  const [postToDelete, setPostToDelete] = useState<Post | null>();\n  const [postToEdit, setPostToEdit] = useState<Post | null>();\n  const [deletingPost, setDeletingPost] = useState(false);\n\n  const loadData = async () => {\n    try {\n      const data = await Promise.all([PostsService.getAll(), UsersService.getAll()]);\n      setUsers(data[1]);\n      setPosts(PostsService.mergeWithUsers(data[0], data[1]));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const showPost = (post: Post | null) => {\n    setPostToShow(post);\n  }\n\n  const deletePost = async () => {\n    if (postToDelete != null) {\n      try {\n        setDeletingPost(true);\n\n        await PostsService.delete(postToDelete.id);\n\n        setPosts(p => p?.filter(x => x.id !== postToDelete.id));\n\n        setDeletingPost(false);\n        setPostToDelete(null);\n\n        AppToaster.show({message: 'Post successfully deleted', intent: Intent.SUCCESS});\n      } catch (e) {\n        console.error(e)\n        AppToaster.show({message: e, intent: Intent.DANGER});\n      }\n    }\n  }\n\n  return <>\n    <div className=\"container-fluid\">\n      <div>Home</div>\n      {postToShow && <ShowPostDialog post={postToShow} onClose={() => setPostToShow(null)}/>}\n      {postToEdit && <EditPostDialog post={postToEdit} users={users || []} onClose={() => setPostToEdit(null)}/>}\n      {\n        postToDelete &&\n        <Alert icon={IconNames.TRASH} intent={Intent.DANGER} isOpen={!!postToDelete} onConfirm={() => deletePost()}\n               cancelButtonText=\"Cancel\"\n               loading={deletingPost}\n               onCancel={() => setPostToDelete(null)}\n               confirmButtonText=\"Delete\">\n            <p>Are you sure to delete this post?</p>\n        </Alert>\n      }\n      <Table numRows={posts ? posts.length : 100} enableRowResizing={false} defaultRowHeight={30}\n             renderMode={RenderMode.BATCH}\n             selectionModes={SelectionModes.NONE} loadingOptions={[TableLoadingOption.CELLS]}\n             columnWidths={[250, 200, 350, 240]}>\n        <Column name=\"Title\"\n                cellRenderer={(rowIndex) => <Cell loading={!posts} tooltip={posts && posts[rowIndex].title}\n                                                  wrapText={false}>{posts && posts[rowIndex].title}</Cell>}/>\n        <Column name=\"Body\"\n                cellRenderer={(rowIndex) => <Cell loading={!posts} tooltip={posts && posts[rowIndex].body}\n                                                  truncated={true}>{posts && posts[rowIndex].body}</Cell>}/>\n        <Column name=\"User\"\n                cellRenderer={\n                  (rowIndex) => {\n                    const value = posts && posts[rowIndex].user?.name;\n                    const email = posts && posts[rowIndex].user?.email;\n\n                    return <Cell loading={!posts}\n                                 tooltip={value}\n                                 truncated={true}>\n                      <Text tagName=\"span\">{value}</Text> <Text tagName=\"small\"\n                                                                className=\"bp3-text-muted\">({email})</Text>\n                    </Cell>\n                  }\n                }\n        />\n        <Column name=\"Actions\"\n                cellRenderer={(rowIndex) => {\n                  const post = posts ? posts[rowIndex] : null;\n                  return <Cell loading={!posts}\n                               className=\"d-flex align-items-center justify-content-between\">\n                    <Button text=\"View\" minimal icon={IconNames.EYE_OPEN} small\n                            onClick={() => showPost(post)}/>\n                    <Button text=\"Edit\" minimal icon={IconNames.EDIT} small intent={Intent.PRIMARY}\n                            onClick={() => setPostToEdit(post)}/>\n                    <Button text=\"Delete\" minimal icon={IconNames.DELETE} small intent={Intent.DANGER}\n                            onClick={() => setPostToDelete(post)}/>\n                  </Cell>\n                }}/>\n      </Table>\n    </div>\n  </>\n}\n","import React from 'react';\nimport './App.scss';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { Login } from './components/auth/Login';\nimport { Position, Toaster } from '@blueprintjs/core';\nimport { SecurityService } from './services/SecurityService';\nimport { Home } from './components/Home';\n\nexport const AppToaster = Toaster.create({\n  position: Position.TOP,\n  autoFocus: true\n});\n\nfunction App() {\n  const isLoggedIn = SecurityService.loggedIn();\n  return (\n      <HashRouter>\n        {!isLoggedIn && <Redirect to=\"/login\"/>}\n        <Switch>\n          <Route exact path=\"/\">\n            <Home/>\n          </Route>\n          <Route exact path=\"/login\">\n            <Login/>\n          </Route>\n        </Switch>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}